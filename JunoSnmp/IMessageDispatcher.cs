// <copyright file="IMessageDispatcher.cs" company="None">
//    <para>
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at</para>
//    <para>
//    http://www.apache.org/licenses/LICENSE-2.0
//    </para><para>
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.</para>
//    <para>
//    Copyright (c) 2016 Jeremy Gibbons. All rights reserved
//    </para>
// </copyright>

namespace JunoSnmp
{
    using System.Collections.Generic;
    using JunoSnmp.Event;
    using JunoSnmp.MP;
    using JunoSnmp.Security;
    using JunoSnmp.SMI;
    using JunoSnmp.Transport;

    public delegate void CommandResponder(object o, CommandResponderEventArgs args);

    /// <summary><para>
    /// The <c>MessageDispatcher</c> interface defines common services of
    /// instances that process incoming SNMP messages and dispatch them to
    /// interested <see cref="ICommandResponder"/> instances. It also provides a service
    /// to send out outgoing SNMP messages.
    /// </para><para>
    /// A <c>MessageDispatcher</c> needs at least one <see cref="ITransportMapping{A}"/>
    /// and at least one <see cref="MessageProcessingModel"/> in order to be able to
    /// process any messages. </para>
    /// </summary>
    public interface IMessageDispatcher : ITransportListener
    {
        /// <summary>
        /// Successfully processed SNMP messages will be presented to all command
        /// responders who have registered for this event until a responder
        /// sets the <see cref="CommandResponderEventArgs.Processed"/>
        /// to<c>true</c>.
        /// </summary>
        event CommandResponder OnIncomingPdu;

        /// <summary>
        /// Gets the next unique request ID. The returned ID is unique across
        /// the last 2^31-1 IDs generated by this message dispatcher.
        /// </summary>
        int NextRequestID { get; }

        /// <summary>
        /// Adds a <see cref="MessageProcessingModel"/> to the dispatcher. In order to
        /// support a specific SNMP protocol version, the message dispatcher needs
        /// a message processing model to process messages before they can be
        /// dispatched.
        /// </summary>
        /// <param name="model">A <see cref="MessageProcessingModel"/> instance
        void AddMessageProcessingModel(MessageProcessingModel model);
        
        /// <summary>
        /// Removes a previously added {@link MessageProcessingModel} from
        /// the dispatcher.
        /// </summary>
        /// <param name="model">A <see cref="MessageProcessingModel"/> instance</param>
        void RemoveMessageProcessingModel(MessageProcessingModel model);
        
        /// <summary>
        /// Gets the <code>MessageProcessingModel</code> for the supplied message
        /// processing model ID.
        /// </summary>
        /// <param name="messageProcessingModel">
        /// A <see cref="MessageProcessingModel"/> ID
        /// (see <see cref="MessageProcessingModel.MessageProcessingModels"/>)
        /// </param>
        /// <returns>
        /// A <see cref="MessageProcessingModel"/> instance if the ID is known, null if not
        /// </returns>
        MessageProcessingModel GetMessageProcessingModel(int messageProcessingModel);
        
        /// <summary>
        /// Adds a {@link TransportMapping} to the dispatcher. The transport mapping
        /// is used to send and receive messages to/from the network.
        /// </summary>
        /// <param name="transport">A <see cref="ITransportMapping{A}"/> instance</param>
        void AddTransportMapping(ITransportMapping<IAddress> transport);
        
        /// <summary>
        /// Removes a previously added {@link TransportMapping} from
        /// the dispatcher.
        /// </summary>
        /// <param name="transport">An <see cref="ITransportMapping{A}"/> instance</param>
        /// <returns>
        /// The <see cref="ITransportMapping{A}"/> instance if it was removed, null otherwise
        /// </returns>
        ITransportMapping<IAddress> RemoveTransportMapping(ITransportMapping<IAddress> transport);
        
        /// <summary>
        /// Gets an enumeration of the the tranport mappings in this message dispatcher.
        /// </summary>
        IEnumerable<ITransportMapping<IAddress>> TransportMappings { get; }
        
        /// <summary>
        /// Returns a transport mapping that can handle the supplied address.
        /// </summary>
        /// <param name="destAddress">An <see cref="IAddress"/> instance.</param>
        /// <returns>
        /// A <see cref="ITransportMapping{A}"/> instance that an be used to 
        /// send an SNMP message to <c>destAddress</c>, or null if none exists
        /// </returns>
        ITransportMapping<IAddress> GetTransport(IAddress destAddress);
        
        /// <summary>
        /// Sends a PDU to the supplied transport address.
        /// </summary>
        /// <param name="transportMapping">
        /// the <c>ITransportMapping</c> to be used to send the PDU. If
        /// <c>transportMapping</c> is <code>null</code> the message
        /// dispatcher will determine the appropriate transport mapping for the
        /// given transport address.
        /// </param>
        /// <param name="target">
        /// The target which identifies the transport address, message processing model,
        /// security model, security name and level.
        /// </param>
        /// <param name="pdu">The SNMP Protocol Data Unit</param>
        /// <param name="expectResponse">
        /// <c>true</c> if a response is expected and a state reference should
        /// be saved (if needed for the supplied message processing model).
        /// </param>
        /// <returns>A <see cref="PduHandle"/> that uniquely identifies this request.</returns>
        /// <remarks>
        /// The <c>contextEngineID</c> and <c>contextName</c> arguments specified
        /// in the RFC are passed in as properties of the scoped PDU
        /// </remarks>
        PduHandle SendPdu(ITransportMapping<IAddress> transportMapping,
                    ITarget target,
                    PDU pdu,
                    bool expectResponse);

        /// <summary>
        /// Sends a PDU to the supplied transport address and returns the
        /// <see cref="PduHandle"/> that uniquely identifies the request as response
        /// <b>after</b> the request has been sent and optional, if a
        /// <see cref="IPduHandleCallback{P}"/> is given, it returns also the
        /// <c>PduHandle</c> just <b>before</b> the request is sent through the
        /// the callback interface.
        /// </summary>
        /// <param name="transportMapping">
        /// the <c>ITransportMapping</c> to be used to send the PDU. If
        /// <c>transportMapping</c> is <code>null</code> the message
        /// dispatcher will determine the appropriate transport mapping for the
        /// given transport address.
        /// </param>
        /// <param name="target">
        /// The target which identifies the transport address, message processing model,
        /// security model, security name and level.
        /// </param>
        /// <param name="pdu">The SNMP Protocol Data Unit</param>
        /// <param name="expectResponse">
        /// <c>true</c> if a response is expected and a state reference should
        /// be saved (if needed for the supplied message processing model).
        /// </param>
        /// <param name="callback">
        /// An optional callback instance that is informed (if not
        /// <c>null</c>) about the newly assigned <see cref="PduHandle"/> just before the
        /// message is sent out.
        /// </param>
        /// <returns>A <see cref="PduHandle"/> that uniquely identifies this request.</returns>
        /// <remarks>
        /// The <c>contextEngineID</c> and <c>contextName</c> arguments specified
        /// in the RFC are passed in as properties of the scoped PDU
        /// </remarks>
        PduHandle SendPdu(ITransportMapping<IAddress> transportMapping,
                    ITarget target,
                    PDU pdu,
                    bool expectResponse,
                    IPduHandleCallback<PDU> callback);
        
        /// <summary>
        /// Sends a PDU to the supplied transport address. This method behaves like
        /// a call to <see cref="SendPdu(ITransportMapping{IAddress}, ITarget, PDU, bool)"/>
        /// with<c>transportMapping</c> set to<c>null</c>.
        /// </summary>
        /// <param name="target">
        /// The target which identifies the transport address, message processing model,
        /// security model, security name and level.
        /// </param>
        /// <param name="pdu">The SNMP Protocol Data Unit</param>
        /// <param name="expectResponse">
        /// <c>true</c> if a response is expected and a state reference should
        /// be saved (if needed for the supplied message processing model).
        /// </param>
        /// <returns>A <see cref="PduHandle"/> that uniquely identifies this request.</returns>
        /// <remarks>
        /// The <c>contextEngineID</c> and <c>contextName</c> arguments specified
        /// in the RFC are passed in as properties of the scoped PDU
        /// </remarks>
        PduHandle SendPdu(ITarget target,
                    PDU pdu,
                    bool expectResponse);

        /// <summary>
        /// Returns a response PDU to the sender of the corresponding request PDU.
        /// </summary>
        /// <param name="messageProcessingModel">The message processing model id</param>
        /// <param name="securityModel">The security model id</param>
        /// <param name="securityName">The security name</param>
        /// <param name="securityLevel">The security level id</param>
        /// <param name="pdu">The PDU</param>
        /// <param name="maxSizeResponseScopedPDU">The maximum size of the response</param>
        /// <param name="stateReference">The state reference</param>
        /// <param name="statusInformation">The status information</param>
        /// <returns>
        /// An MP error status of <see cref="SnmpConstants.SNMP_MP_OK"/> if the operation
        /// was successful.
        /// </returns>
        /// <remarks>
        /// The <c>contextEngineID</c> and <c>contextName</c> arguments specified
        /// in the RFC are passed in as properties of the scoped PDU
        /// </remarks>
        int ReturnResponsePdu(MessageProcessingModel.MessageProcessingModels messageProcessingModel,
                              SecurityModel.SecurityModelID securityModel,
                              byte[] securityName,
                              SecurityLevel securityLevel,
                              PDU pdu,
                              int maxSizeResponseScopedPDU,
                              StateReference stateReference,
                              StatusInformation statusInformation);
        
        /// <summary>
        /// Release any state references associated with the supplied
        /// <c>PduHandle</c> in the specified message processing model.
        /// </summary>
        /// <param name="messageProcessingModel">A <see cref="MessageProcessingModel"/> ID</param>
        /// <param name="pduHandle">The <see cref="PduHandle"/> that identifies a confirmed class message</param>
        void ReleaseStateReference(MessageProcessingModel.MessageProcessingModels messageProcessingModel,
                                   PduHandle pduHandle);
    }
}
